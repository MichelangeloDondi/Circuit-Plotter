# ==============================================================================
# ==============================================================================
# ============================= Module_Saving.jl ===============================
# ==============================================================================
# ==============================================================================

"""
    Module: Saving

Author: Michelangelo Dondi
Date: 19-10-2023
Description:
    Dedicated to saving plots generated by the Circuit Visualization Tool.
    This module simplifies the saving process by providing a single function to call.

Version: 2.3
License: MIT License

Exported functions:
- `save_current_plot()`: Saves the current plot into an "Images" directory.
"""
module Saving

    # ==============================================================================
    # =========================== Exported Functions ===============================
    # ==============================================================================
        
        # Invoke this function to export the save_current_plot function
        export save_current_plot 

    # ==============================================================================
    # ============================ Required Packages ===============================
    # ==============================================================================

        # For saving plots
        using Plots
    
    # ==============================================================================
    # ======================= function save_current_plot ===========================
    # ==============================================================================

        """
            save_current_plot() -> nothing

        Saves the current plot into an "Images" directory with a timestamped filename.

        Parameters:
        - None

        Returns:
        - nothing
        """
        function save_current_plot(io::IO=stdin)
            # Determine paths
            project_dir = joinpath(@__DIR__, "..")   # Project root directory
            images_dir = _ensure_images_directory(project_dir)
            
            # Generate a timestamped filename
            filename = _generate_filename(io)
            filepath = joinpath(images_dir, filename)
            filepath = joinpath(images_dir, filename)
                
            # Save the plot and provide feedback to user
            Plots.savefig(filepath)
            println("Circuit plot saved as '$filepath'.")
            return filepath
        end

    # ==============================================================================
    # ------------------ _ensure_images_directory ---------------------
    # ==============================================================================

        """
            _ensure_images_directory(base_dir::String) -> String

        Ensures that an "Images" directory exists within the specified base directory.
        Returns the path to the "Images" directory.

        Parameters:
        - base_dir: The base directory to check for the existence of an "Images" directory.

        Returns:
        - The path to the "Images" directory.
        """
        function _ensure_images_directory(base_dir::String)
            images_path = joinpath(base_dir, "Images")
            if !isdir(images_path)
                mkdir(images_path)
            end
            return images_path
        end    

    # ==============================================================================
    # ----------------------------- _generate_filename -----------------------------
    # ==============================================================================

        """
            _generate_filename() -> String

        Ask the user for a filename to save the plot as. If no filename is provided, 
        a default filename "circuit_plot.png" is used.    

        Parameters:
        - None
            
        Returns:
        - The generated filename.
        """
        function _generate_filename(io::IO=stdin)
            println("Enter a filename for the circuit plot")
            println("Otherwise, press Enter to use the default (default: circuit_plot.png).")
            filename = readline(io)

            # If filename is empty, use the default filename
            if filename == ""
                return "circuit_plot.png"
            end
            
            # If filename doesn't have an extension, append ".png"
            if !contains(filename, r"\.\w+$")  # Regular expression check for file extension
                filename = filename * ".png"
            end

            return filename
        end 
end